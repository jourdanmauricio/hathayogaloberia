---
import { Icon } from 'astro-icon';

const BACKEND = import.meta.env.BACKEND;
const URL = import.meta.env.URL;
---

<section class="subscription py-16">
  <p class="px-4 lg:px-8">
    ¿QUIERES RECIBIR LAS ÚLTIMAS NOVEDADES EN TU BUZÓN DE CORREO?
  </p>
  <div
    id="response-subscriber-form"
    class="flex-col min-h-[300px] hidden p-10"
  >
    <p
      id="form-subscriber-result"
      class="text-xl font-semibold"
    >
      Gracias por suscribirte.
    </p>
    <p
      id="message-subscriber"
      class="mt-4"
    >
      En breve recibirás nuestro boletín.
    </p>
    <p>Muchas gracias.</p>
  </div>
  <form
    class="flex flex-col gap-2 px-4 lg:px-8 w-full sm:w-1/2 pt-4"
    id="subscriber-form"
    novalidate
  >
    <!-- NAME -->
    <div>
      <label
        for="name"
        class="block text-sm font-medium text-gray-900"
        >Nombre</label
      >
      <div class="relative">
        <div
          class="absolute -top-6 inset-y-0 left-0 flex items-center pl-3.5 pointer-events-none"
        >
          <Icon
            name="mdi:account"
            class="w-5 h-5 text-gray-500"
          />
        </div>
        <input
          type="text"
          id="name"
          name="name"
          class="border text-sm rounded-lg block w-full pl-10 p-2.5 bg-gray-200 border-gray-600 placeholder-gray-500 text-slate-900 focus:ring-blue-500 focus:border-blue-500"
          data-pattern="^[A-Za-z ñáéíóúÑÁÉÍÓÚ]{0,150}$"
          data-error="El nombre no es válido"
          placeholder="Nombre"
          required
        />
        <span class="text-sm text-red-500 transition-opacity opacity-0"
          >Error</span
        >
      </div>
    </div>

    <!-- EMAIL -->
    <div>
      <label
        for="email"
        class="block text-sm font-medium text-gray-900"
        >Email</label
      >
      <div class="relative">
        <div
          class="absolute -top-6 inset-y-0 left-0 flex items-center pl-3.5 pointer-events-none"
        >
          <Icon
            name="mdi:email"
            class="w-5 h-5 text-gray-500"
          />
        </div>
        <input
          type="text"
          id="email"
          name="email"
          class="border text-sm rounded-lg block w-full pl-10 p-2.5 bg-gray-200 border-gray-600 placeholder-gray-500 text-slate-900 focus:ring-blue-500 focus:border-blue-500"
          data-pattern="^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"
          data-error="Email inválido"
          placeholder="name@email.com"
          required
        />
        <span class="text-sm text-red-500 transition-opacity opacity-0"
          >Error</span
        >
      </div>
    </div>

    <!-- CHECK -->
    <div class="relative">
      <label
        for="accept"
        class="text-sm"
      >
        <input
          type="checkbox"
          name="accept"
          id="accept"
          required
        />
        <span
          class="absolute top-5 left-0 text-sm text-red-500 transition-opacity opacity-0"
          >Error</span
        >
         He leído y acepto la política de privacidad
      </label>
    </div>
    <button
      class="mt-6 p-2 px-4 h-10 bg-primary text-white rounded w-full flex items-center justify-center"
      ><span id="subscribe-btn">Suscribete</span></button
    >
  </form>
</section>

<style>
  .subscription {
    height: 100%;
    width: 100%;
    background: url(/hathayogaloberia/images/bks-iyengar.webp) no-repeat center
      95%;
    background-size: cover;
  }
  .spinner-btn {
    pointer-events: none;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-top-color: #fff;
    border-radius: 50%;
    animation: spinner 1s ease-out infinite;
  }

  @keyframes spinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<script define:vars={{ BACKEND, URL }}>
const subscribeBtn = document.getElementById( 'subscribe-btn' );

const subscriberForm = document.getElementById( 'subscriber-form' );
subscriberForm.addEventListener( 'submit', ( e ) => sendform( e ) );

async function sendform( e ) {
  e.preventDefault();

  const fieldsToValidate = document
    .getElementById( e.target.id )
    .querySelectorAll( '[required], [data-pattern]' );

  let error = false;
  for ( let i = 0; i < fieldsToValidate.length; i++ ) {
    const field = fieldsToValidate[i];
    const spanError = field.nextSibling;
    spanError.classList.add( 'opacity-0' );
    if ( field.hasAttribute( 'required' ) && field.value.trim().length === 0 ) {
      spanError.textContent = 'Requerido';
      spanError.classList.remove( 'opacity-0' );
      spanError.classList.add( 'opacity-1' );
      error = true;
    }

    if (
      field.hasAttribute( 'required' ) &&
      field.type === 'checkbox' &&
      !field.checked
    ) {
      spanError.textContent = 'Requerido';
      spanError.classList.remove( 'opacity-0' );
      spanError.classList.add( 'opacity-1' );
      error = true;
    }

    if ( field.value.trim().length > 0 && field.hasAttribute( 'data-pattern' ) ) {
      let regex = new RegExp( field.dataset.pattern );

      if ( regex.exec( field.value ) === null ) {
        spanError.textContent = field.dataset.error;
        spanError.classList.remove( 'opacity-0' );
        spanError.classList.add( 'opacity-1' );
        error = true;
      }
    }
  }

  if ( error ) return error;

  const data = Object.fromEntries( new FormData( e.target ) );

  data.url = URL;
  delete data.accept;
  const responseSubscriberForm = document.getElementById(
    'response-subscriber-form'
  );
  const formSubsciberResult = document.getElementById(
    'form-subscriber-result'
  );
  const messageSubscriber = document.getElementById( 'message-subscriber' );

  try {
    subscribeBtn.innerHTML = '<div></div>';
    subscribeBtn.classList.add( 'spinner-btn' );
    const response = await fetch( `${BACKEND}/subscribers`, {
      method: 'POST',
      body: JSON.stringify( data ),
      headers: { 'Content-Type': 'application/json' },
    } );

    if ( response.ok === false ) throw 'Error';
  } catch ( err ) {
    formSubsciberResult.textContent = 'Error realizando la suscripción';
    messageSubscriber.textContent = 'Intentelo nuevamente.';
  } finally {
    responseSubscriberForm.classList.add( 'flex' );
    responseSubscriberForm.classList.remove( 'hidden' );
    subscriberForm.classList.add( 'hidden' );
    subscriberForm.classList.remove( 'flex' );
  }
}
</script>
